<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- SEO Meta Tags -->
    <title>Toronto Public Library Programs Calendar | Find Library Events & Activities</title>
    <meta name="description" content="Discover and explore Toronto Public Library programs, events, and activities. Search by location, date, category, and age group. Free library programs for all ages across Toronto.">
    <meta name="keywords" content="Toronto Public Library, library programs, library events, Toronto library activities, free library programs, library calendar, Toronto library schedule, library workshops, library classes">
    <meta name="author" content="Toronto Public Library">
    <meta name="robots" content="index, follow">
    
    <!-- Open Graph Meta Tags for Social Media -->
    <meta property="og:title" content="Toronto Public Library Programs Calendar">
    <meta property="og:description" content="Discover and explore Toronto Public Library programs, events, and activities. Search by location, date, category, and age group.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://your-domain.com">
    <meta property="og:image" content="https://your-domain.com/images/library-programs-og.jpg">
    <meta property="og:site_name" content="Toronto Public Library Programs Calendar">
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Toronto Public Library Programs Calendar">
    <meta name="twitter:description" content="Discover and explore Toronto Public Library programs, events, and activities.">
    <meta name="twitter:image" content="https://your-domain.com/images/library-programs-twitter.jpg">
    
    <!-- Canonical URL -->
    <link rel="canonical" href="https://your-domain.com">
    
    <!-- Structured Data (JSON-LD) -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebApplication",
        "name": "Toronto Public Library Programs Calendar",
        "description": "Discover and explore Toronto Public Library programs, events, and activities. Search by location, date, category, and age group.",
        "url": "https://your-domain.com",
        "applicationCategory": "EntertainmentApplication",
        "operatingSystem": "Web Browser",
        "offers": {
            "@type": "Offer",
            "price": "0",
            "priceCurrency": "CAD"
        },
        "provider": {
            "@type": "Organization",
            "name": "Toronto Public Library",
            "url": "https://www.torontopubliclibrary.ca"
        },
        "audience": {
            "@type": "Audience",
            "audienceType": "All ages"
        }
    }
    </script>
    
    <!-- External CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <style>
        :root {
            --primary-color: #0066cc;
            --secondary-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --light-bg: #f8f9fa;
            --border-color: #dee2e6;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-bg);
            color: #333;
        }
        
        .navbar {
            background: linear-gradient(135deg, var(--primary-color), #004d99);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .navbar-brand {
            font-weight: bold;
            font-size: 1.4rem;
        }
        
        .main-container {
            margin-top: 2rem;
            padding: 0 1rem;
        }
        
        /* Filter Section */
        .filter-section {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid var(--border-color);
        }
        
        .filter-title {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid #ddd;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(0, 102, 204, 0.25);
        }
        
        /* View Toggle */
        .view-toggle {
            background: white;
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid var(--border-color);
        }
        
        .view-toggle .btn-group .btn {
            border-radius: 8px !important;
            padding: 0.5rem 1rem;
            font-weight: 500;
        }
        
        .view-toggle .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        /* Calendar Navigation */
        .calendar-nav {
            background: white;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .calendar-nav h2 {
            margin: 0;
            color: var(--primary-color);
            font-weight: 600;
        }
        
        .nav-buttons .btn {
            margin: 0 0.25rem;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 500;
        }
        
        /* Map Filter Controls */
        .map-filter-controls {
            background: white;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .map-filter-controls label {
            font-weight: 500;
            margin: 0;
            white-space: nowrap;
        }
        
        .map-filter-controls .form-control {
            width: 200px;
        }
        
        .map-filter-controls .btn {
            white-space: nowrap;
        }
        
        /* Current location button */
        .location-controls {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
        }

        .location-btn {
            background: white;
            border: 2px solid #ccc;
            border-radius: 4px;
            padding: 5px;
            cursor: pointer;
            box-shadow: 0 1px 5px rgba(0,0,0,0.65);
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .location-btn:hover {
            background: #f4f4f4;
        }

        .location-btn.loading {
            color: #0066cc;
        }
        
        /* Calendar Grid Styles with Event Tiles */
        .calendar-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid var(--border-color);
            margin-bottom: 2rem;
        }
        
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            overflow: hidden;
            background: var(--border-color);
        }
        
        .calendar-day-header {
            background: var(--primary-color);
            color: white;
            padding: 1rem;
            text-align: center;
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .calendar-day {
            background: #fff;
            height: 120px;
            padding: 0.4rem;
            position: relative;
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .calendar-day:hover {
            background: #f0f8ff;
            box-shadow: inset 0 0 0 2px var(--primary-color);
        }
        
        .calendar-day.other-month {
            background: #f8f9fa;
            color: #999;
        }
        
        .calendar-day.other-month:hover {
            background: #f0f0f0;
        }
        
        .calendar-day.today {
            background: #e3f2fd;
            border: 2px solid var(--primary-color);
            box-sizing: border-box;
        }
        
        .day-number {
            font-weight: 600;
            font-size: 0.9rem;
            margin-bottom: 0.3rem;
            color: #333;
            flex-shrink: 0;
        }
        
        .other-month .day-number {
            color: #999;
        }
        
        /* Event tiles in calendar */
        .events-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 0.15rem;
        }
        
        .event-tile {
            background: var(--primary-color);
            color: white;
            font-size: 0.65rem;
            padding: 0.1rem 0.3rem;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            line-height: 1.2;
            display: block;
        }
        
        .event-tile:hover {
            background: #004d99;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }
        
        .more-events {
            background: #666;
            color: white;
            font-size: 0.6rem;
            padding: 0.1rem 0.3rem;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-style: italic;
        }
        
        .more-events:hover {
            background: #333;
            transform: translateY(-1px);
        }
        
        /* Day Events Modal */
        .day-events-modal .modal-dialog {
            max-width: 900px;
        }
        
        .day-events-modal .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .day-events-modal .modal-header {
            background: var(--primary-color);
            color: white;
            border-radius: 12px 12px 0 0;
        }
        
        .day-event-card {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .day-event-card:hover {
            border-color: var(--primary-color);
            box-shadow: 0 4px 12px rgba(0, 102, 204, 0.1);
            transform: translateY(-2px);
        }
        
        .day-event-card .card-header {
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .library-link {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
        }
        
        .library-link:hover {
            color: #004d99;
            text-decoration: underline;
        }
        
        /* Event Details Modal */
        .modal-header {
            background: var(--primary-color);
            color: white;
            border-radius: 12px 12px 0 0;
        }
        
        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .event-detail-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid #eee;
        }
        
        .event-detail-item:last-child {
            border-bottom: none;
        }
        
        .event-detail-label {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.25rem;
        }
        
        /* Map Styles */
        .map-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid var(--border-color);
            margin-bottom: 2rem;
        }
        
        #map {
            height: 500px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            position: relative;
        }
        
        .library-popup {
            max-width: 250px;
        }
        
        .library-popup h3 {
            color: var(--primary-color);
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }
        
        .popup-event {
            padding: 0.5rem;
            border: 1px solid #eee;
            border-radius: 4px;
            margin-bottom: 0.25rem;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        
        .popup-event:hover {
            background: #f8f9fa;
        }
        
        .event-list {
            max-height: 200px;
            overflow-y: auto;
        }
        
        /* Loading and Status */
        .loading {
            text-align: center;
            padding: 3rem;
            color: #666;
        }
        
        .loading i {
            font-size: 2rem;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .status-bar {
            background: white;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border: 1px solid var(--border-color);
        }
        
        .status-item {
            display: inline-block;
            margin-right: 2rem;
            color: #666;
        }
        
        .status-item strong {
            color: var(--primary-color);
        }
        
        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .calendar-nav {
                flex-direction: column;
                gap: 1rem;
            }
            
            .calendar-day {
                height: 90px;
                padding: 0.2rem;
            }
            
            .day-number {
                font-size: 0.8rem;
                margin-bottom: 0.2rem;
            }
            
            .event-tile {
                font-size: 0.55rem;
                padding: 0.05rem 0.2rem;
            }
            
            .more-events {
                font-size: 0.5rem;
                padding: 0.05rem 0.2rem;
            }
            
            .main-container {
                padding: 0 0.5rem;
            }
            
            #map {
                height: 300px;
            }
            
            .day-events-modal .modal-dialog {
                max-width: 95%;
                margin: 1rem auto;
            }
            
            .map-filter-controls {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .map-filter-controls .form-control {
                width: 100%;
            }
        }
        
        /* Utility Classes */
        .text-muted { color: #6c757d !important; }
        .text-primary { color: var(--primary-color) !important; }
        .text-success { color: var(--secondary-color) !important; }
        .text-danger { color: var(--danger-color) !important; }
        .text-warning { color: var(--warning-color) !important; }
        
        /* Accessibility improvements */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        .btn:focus,
        .form-control:focus,
        .form-select:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        .skip-link {
            position: absolute;
            top: -40px;
            left: 6px;
            background: var(--primary-color);
            color: white;
            padding: 8px;
            text-decoration: none;
            z-index: 1000;
        }

        .skip-link:focus {
            top: 6px;
        }
    </style>
</head>
<body>
    <a href="#main-content" class="skip-link">Skip to main content</a>
    
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark" role="navigation" aria-label="Main navigation">
        <div class="container-fluid">
            <a class="navbar-brand" href="/" aria-label="Toronto Public Library Programs Calendar Home">
                <i class="fas fa-calendar-alt me-2" aria-hidden="true"></i>
                Toronto Public Library Programs Calendar
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3" id="eventCount" aria-live="polite">
                    <i class="fas fa-clock me-1" aria-hidden="true"></i>
                    Loading programs...
                </span>
                <span class="navbar-text" id="locationStatus" aria-live="polite">
                    <i class="fas fa-map-marker-alt me-1" aria-hidden="true"></i>
                    <span id="locationStatusText">Location not set</span>
                </span>
            </div>
        </div>
    </nav>

    <main id="main-content" class="container-fluid main-container" role="main">
        <h1 class="sr-only">Toronto Public Library Programs Calendar</h1>
        
        <!-- Status Bar -->
        <div class="status-bar" id="statusBar" style="display: none;">
            <div class="status-item">
                <i class="fas fa-calendar me-1"></i>
                <strong id="totalEvents">0</strong> total programs
            </div>
            <div class="status-item">
                <i class="fas fa-filter me-1"></i>
                <strong id="filteredEvents">0</strong> showing
            </div>
            <div class="status-item">
                <i class="fas fa-map-marker-alt me-1"></i>
                <strong id="libraryCount">0</strong> libraries
            </div>
        </div>

        <!-- Filters -->
        <div class="filter-section">
            <div class="filter-title">
                <i class="fas fa-filter"></i>
                Search & Filter Programs
            </div>
            <div class="row">
                <div class="col-md-3 mb-3">
                    <label class="form-label">Search Programs</label>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search programs...">
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Library</label>
                    <select class="form-select" id="libraryFilter">
                        <option value="">All Libraries</option>
                    </select>
                </div>
                <div class="col-md-2 mb-3">
                    <label class="form-label">Category</label>
                    <select class="form-select" id="categoryFilter">
                        <option value="">All Categories</option>
                    </select>
                </div>
                <div class="col-md-2 mb-3">
                    <label class="form-label">Age Group</label>
                    <select class="form-select" id="ageGroupFilter">
                        <option value="">All Ages</option>
                    </select>
                </div>
                <div class="col-md-2 mb-3">
                    <label class="form-label">Distance</label>
                    <select class="form-select" id="distanceFilter">
                        <option value="">Any Distance</option>
                        <option value="5">Within 5 km</option>
                        <option value="10">Within 10 km</option>
                        <option value="20">Within 20 km</option>
                        <option value="50">Within 50 km</option>
                    </select>
                </div>
                <div class="col-md-2 mb-3">
                    <label class="form-label">&nbsp;</label>
                    <button class="btn btn-outline-secondary w-100" id="clearFilters">
                        <i class="fas fa-times me-1"></i>
                        Clear Filters
                    </button>
                </div>
            </div>
        </div>

        <!-- View Toggle -->
        <div class="view-toggle">
            <div class="btn-group" role="group" id="viewToggle">
                <input type="radio" class="btn-check" name="view" id="calendarView" value="calendar" checked>
                <label class="btn btn-outline-primary" for="calendarView">
                    <i class="fas fa-calendar me-1"></i>
                    Calendar
                </label>
                <input type="radio" class="btn-check" name="view" id="mapView" value="map">
                <label class="btn btn-outline-primary" for="mapView">
                    <i class="fas fa-map me-1"></i>
                    Map
                </label>
            </div>
        </div>

        <!-- Calendar View -->
        <div id="calendarContainer">
            <!-- Calendar Navigation -->
            <div class="calendar-nav">
                <div class="nav-buttons">
                    <button class="btn btn-outline-primary" id="prevMonth">
                        <i class="fas fa-chevron-left"></i>
                        Previous
                    </button>
                    <button class="btn btn-primary" id="todayBtn">
                        <i class="fas fa-calendar-day"></i>
                        Today
                    </button>
                </div>
                <h2 id="currentMonth">January 2024</h2>
                <div class="nav-buttons">
                    <button class="btn btn-outline-primary" id="nextMonth">
                        Next
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>

            <!-- Calendar -->
            <div class="calendar-container">
                <div class="calendar-grid" id="calendarGrid">
                    <!-- Calendar will be generated here -->
                </div>
            </div>
        </div>

        <!-- Map View -->
        <div id="mapContainer" style="display: none;">
            <!-- Map Date Filter -->
            <div class="map-filter-controls">
                <label for="dateFilter">
                    <i class="fas fa-calendar-alt me-1"></i>
                    Filter by Date:
                </label>
                <input type="date" id="dateFilter" class="form-control">
                <button id="clearDateFilter" class="btn btn-outline-secondary">
                    <i class="fas fa-times me-1"></i>
                    Clear Filter
                </button>
            </div>
            
            <div class="map-container">
                <h3 class="mb-3">
                    <i class="fas fa-map-marker-alt me-2"></i>
                    Library Locations
                </h3>
                <div id="map">
                    <!-- Current location button -->
                    <div class="location-controls">
                        <button id="locationBtn" class="location-btn" title="Find my location">
                            <i class="fas fa-location-arrow"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Day Events Modal -->
    <div class="modal fade day-events-modal" id="dayEventsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="dayEventsModalTitle">Programs for Selected Day</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="dayEventsModalBody">
                    <!-- Day events will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Event Details Modal -->
    <div class="modal fade" id="eventModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Program Details</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="eventModalBody">
                    <!-- Event details will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-light mt-5 py-4" role="contentinfo">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h3>Toronto Public Library Programs Calendar</h3>
                    <p>Discover and explore free programs, events, and activities at Toronto Public Library branches across the city.</p>
                    <p><a href="https://www.torontopubliclibrary.ca" target="_blank" rel="noopener">Visit Toronto Public Library</a></p>
                </div>
                <div class="col-md-6">
                    <h4>Quick Links</h4>
                    <ul class="list-unstyled">
                        <li><a href="#" onclick="showCalendarView(); return false;">Calendar View</a></li>
                        <li><a href="#" onclick="showMapView(); return false;">Map View</a></li>
                        <li><a href="/health" target="_blank">API Health Check</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>

    <!-- External JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <!-- Your existing JavaScript code goes here -->
    <script>
        // Global Variables
        let allEvents = [];
        let filteredEvents = [];
        let currentDate = new Date();
        let map = null;
        let libraryMarkers = [];
        let libraryCoordinates = {};
        let markersLayer; // Layer group for markers
        let currentLocationMarker = null; // Current location marker

        // Add these variables at the top of your script section
        let filteredEventsCache = new Map();
        let lastFilterState = '';
        let userLocationCache = null;

        // Cache for distance calculations
        const distanceCache = new Map();

        // Custom pin icon for libraries
        const pinIcon = L.icon({
            iconUrl: 'data:image/svg+xml;base64,' + btoa(`
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#dc2626" width="30" height="30">
                    <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
                </svg>
            `),
            iconSize: [30, 30],
            iconAnchor: [15, 30],
            popupAnchor: [0, -30]
        });

        // Custom icon for current location
        const currentLocationIcon = L.icon({
            iconUrl: 'data:image/svg+xml;base64,' + btoa(`
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#4285f4" width="24" height="24">
                    <circle cx="12" cy="12" r="8" fill="#4285f4" stroke="#fff" stroke-width="3"/>
                    <circle cx="12" cy="12" r="3" fill="#fff"/>
                </svg>
            `),
            iconSize: [24, 24],
            iconAnchor: [12, 12],
            popupAnchor: [0, -12]
        });

        // Initialize application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Page loaded, starting initialization...');
            setupEventListeners();
            loadFilterOptions();
            loadLibraryCoordinates();
            loadEvents();
            
            // Check for stored location and update status
            checkStoredLocation();
            updateLocationStatus();
        });

        // Generate program page URL from website field in program data
        function getEventPageUrl(event) {
            // Use the website field from the program API data
            if (event.website && event.website.trim()) {
                return event.website.trim();
            }
            
            // Fallback - if no website, return # to indicate no link
            return '#';
        }

        // Check if program has a valid URL
        function hasValidEventUrl(event) {
            return event.website && event.website.trim() && event.website.trim() !== '#';
        }

        // Load library coordinates from API
        async function loadLibraryCoordinates() {
            try {
                console.log('📍 Loading library coordinates...');
                const response = await fetch('/api/events/locations');
                const data = await response.json();
                
                if (data.success) {
                    libraryCoordinates = data.locations;
                    console.log(`✅ Loaded ${Object.keys(libraryCoordinates).length} library locations`);
                } else {
                    console.warn('⚠️ Could not load library coordinates, using fallback data');
                    libraryCoordinates = {
                        'Toronto Reference Library': { lat: 43.6532, lng: -79.3832 },
                        'North York Central Library': { lat: 43.7615, lng: -79.4111 },
                        'Scarborough Civic Centre Branch': { lat: 43.7735, lng: -79.2584 }
                    };
                }
            } catch (error) {
                console.error('Error loading library coordinates:', error);
                libraryCoordinates = {
                    'Toronto Reference Library': { lat: 43.6532, lng: -79.3832 },
                    'North York Central Library': { lat: 43.7615, lng: -79.4111 },
                    'Scarborough Civic Centre Branch': { lat: 43.7735, lng: -79.2584 }
                };
            }
        }

        // Enhanced location detection with better error handling and user feedback
        function findCurrentLocation() {
            const locationBtn = document.getElementById('locationBtn');
            
            if (!navigator.geolocation) {
                showLocationError('Geolocation is not supported by this browser.');
                return;
            }
            
            // Show loading state
            locationBtn.classList.add('loading');
            locationBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            locationBtn.title = 'Finding location...';
            
            // Request location with better options
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    const accuracy = position.coords.accuracy;
                    
                    console.log(`📍 Current location: ${lat}, ${lng} (accuracy: ${accuracy}m)`);
                    
                    // Store user location in localStorage for future use
                    localStorage.setItem('userLocation', JSON.stringify({
                        lat: lat,
                        lng: lng,
                        accuracy: accuracy,
                        timestamp: Date.now()
                    }));
                    
                    // Update map with user location
                    updateMapWithUserLocation(lat, lng, accuracy);
                    
                    // Find and highlight nearest libraries
                    findNearestLibraries(lat, lng);
                    
                    // Reset button state
                    locationBtn.classList.remove('loading');
                    locationBtn.innerHTML = '<i class="fas fa-location-arrow"></i>';
                    locationBtn.title = 'Location found! Click to update';
                    
                    // Show success message
                    showLocationSuccess(`Location found! Accuracy: ~${Math.round(accuracy)}m`);
                    
                },
                function(error) {
                    console.error('❌ Location error:', error);
                    handleLocationError(error);
                    
                    // Reset button state
                    locationBtn.classList.remove('loading');
                    locationBtn.innerHTML = '<i class="fas fa-location-arrow"></i>';
                    locationBtn.title = 'Find my location';
                },
                {
                    enableHighAccuracy: true,
                    timeout: 15000, // Increased timeout
                    maximumAge: 300000 // 5 minutes
                }
            );
        }

        // Enhanced nearest libraries function
        function findNearestLibraries(userLat, userLng) {
            const librariesWithDistance = [];
            
            // Calculate distance to each library
            Object.entries(libraryCoordinates).forEach(([name, coords]) => {
                const distance = calculateDistance(userLat, userLng, coords.lat, coords.lng);
                librariesWithDistance.push({
                    name: name,
                    distance: distance,
                    coords: coords
                });
            });
            
            // Sort by distance and get top 5
            const nearestLibraries = librariesWithDistance
                .sort((a, b) => a.distance - b.distance)
                .slice(0, 5);
            
            console.log('📍 Nearest libraries:', nearestLibraries);
            
            // Only highlight nearest libraries if no distance filter is active
            const distanceFilter = document.getElementById('distanceFilter').value;
            if (!distanceFilter) {
                highlightNearestLibraries(nearestLibraries);
            }
            
            // Create popup content with nearest libraries
            let popupContent = '<div><strong>📚 Nearest Libraries:</strong><br>';
            nearestLibraries.forEach((lib, index) => {
                popupContent += `
                    <div style="margin: 5px 0; padding: 3px; border-bottom: 1px solid #eee;">
                        ${index + 1}. <strong>${lib.name}</strong><br>
                        <small>📍 ${lib.distance.toFixed(1)} km away</small>
                    </div>
                `;
            });
            popupContent += '</div>';
            
            // Update current location popup
            if (currentLocationMarker) {
                currentLocationMarker.bindPopup(popupContent).openPopup();
            }
        }

        // New function to highlight nearest libraries
        function highlightNearestLibraries(nearestLibraries) {
            // Remove existing highlights
            if (window.nearestLibraryMarkers) {
                window.nearestLibraryMarkers.forEach(marker => {
                    if (map.hasLayer(marker)) {
                        map.removeLayer(marker);
                    }
                });
            }
            
            window.nearestLibraryMarkers = [];
            
            // Only add highlights if no distance filter is active
            const distanceFilter = document.getElementById('distanceFilter').value;
            if (distanceFilter) {
                console.log('📍 Distance filter active, skipping library highlights');
                return;
            }
            
            // Add highlighted markers for nearest libraries
            nearestLibraries.forEach((lib, index) => {
                const highlightIcon = L.icon({
                    iconUrl: 'data:image/svg+xml;base64,' + btoa(`
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#28a745" width="35" height="35">
                            <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
                        </svg>
                    `),
                    iconSize: [35, 35],
                    iconAnchor: [17, 35],
                    popupAnchor: [0, -35]
                });
                
                const marker = L.marker([lib.coords.lat, lib.coords.lng], { 
                    icon: highlightIcon,
                    zIndexOffset: 500
                });
                
                marker.bindPopup(`
                    <div style="text-align: center;">
                        <strong>🏆 #${index + 1} Nearest</strong><br>
                        <strong>${lib.name}</strong><br>
                        <small>📍 ${lib.distance.toFixed(1)} km away</small>
                    </div>
                `);
                
                marker.addTo(map);
                window.nearestLibraryMarkers.push(marker);
            });
        }

        // Optimized distance calculation with caching
        function calculateDistance(lat1, lng1, lat2, lng2) {
            const cacheKey = `${lat1.toFixed(3)},${lng1.toFixed(3)},${lat2.toFixed(3)},${lng2.toFixed(3)}`;
            
            if (distanceCache.has(cacheKey)) {
                return distanceCache.get(cacheKey);
            }
            
            const R = 6371; // Earth's radius in kilometers
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLng = (lng2 - lng1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                      Math.sin(dLng/2) * Math.sin(dLng/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            const distance = R * c;
            
            // Cache the result
            distanceCache.set(cacheKey, distance);
            
            // Limit cache size
            if (distanceCache.size > 1000) {
                const firstKey = distanceCache.keys().next().value;
                distanceCache.delete(firstKey);
            }
            
            return distance;
        }

        // Setup event listeners
        function setupEventListeners() {
            // Use event delegation for better performance
            document.addEventListener('change', function(e) {
                if (e.target.matches('#libraryFilter, #categoryFilter, #ageGroupFilter, #distanceFilter, #dateFilter')) {
                    filterEvents();
                }
            });
            
            // Use event delegation for buttons
            document.addEventListener('click', function(e) {
                if (e.target.matches('#clearFilters')) {
                    clearFilters();
                } else if (e.target.matches('#clearDateFilter')) {
                    document.getElementById('dateFilter').value = '';
                    filterEvents();
                } else if (e.target.matches('#locationBtn')) {
                    findCurrentLocation();
                } else if (e.target.matches('#prevMonth')) {
                    currentDate.setMonth(currentDate.getMonth() - 1);
                    renderCalendar();
                } else if (e.target.matches('#nextMonth')) {
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    renderCalendar();
                } else if (e.target.matches('#todayBtn')) {
                    currentDate = new Date();
                    renderCalendar();
                }
            });
            
            // View toggle
            document.querySelectorAll('input[name="view"]').forEach(input => {
                input.addEventListener('change', function() {
                    if (this.value === 'calendar') {
                        showCalendarView();
                    } else if (this.value === 'map') {
                        showMapView();
                    }
                });
            });
        }

        // Optimized filter events function
        function filterEvents() {
            const search = document.getElementById('searchInput').value.toLowerCase();
            const library = document.getElementById('libraryFilter').value;
            const category = document.getElementById('categoryFilter').value;
            const ageGroup = document.getElementById('ageGroupFilter').value;
            const selectedDate = document.getElementById('dateFilter').value;
            const distance = document.getElementById('distanceFilter').value;

            // Create filter state string for caching
            const filterState = `${search}|${library}|${category}|${ageGroup}|${selectedDate}|${distance}`;
            
            // Check cache first
            if (filteredEventsCache.has(filterState) && filterState === lastFilterState) {
                console.log('✅ Using cached filtered results');
                filteredEvents = filteredEventsCache.get(filterState);
                updateEventCount();
                updateStatusBar();
                renderCalendar();
                updateMapMarkers();
                return;
            }

            // Cache user location to avoid repeated localStorage access
            if (distance && !userLocationCache) {
                const storedLocation = localStorage.getItem('userLocation');
                if (storedLocation) {
                    try {
                        userLocationCache = JSON.parse(storedLocation);
                    } catch (error) {
                        userLocationCache = null;
                    }
                }
            }

            // Use more efficient filtering with early exit
            filteredEvents = allEvents.filter(event => {
                // Early exit for search filter (most expensive)
                if (search) {
                    const searchableText = `${event.title || ''} ${event.description || ''} ${event.library || ''} ${event.category || ''}`.toLowerCase();
                    if (!searchableText.includes(search)) return false;
                }
                
                // Early exit for library filter
                if (library && event.library !== library) return false;
                
                // Early exit for category filter
                if (category && event.category !== category) return false;
                
                // Early exit for age group filter
                if (ageGroup && event.ageGroup !== ageGroup) return false;
                
                // Early exit for date filter
                if (selectedDate) {
                    if (!event.startDate) return false;
                    const eventDate = event.startDate.split('T')[0];
                    if (eventDate !== selectedDate) return false;
                }

                // Early exit for distance filter
                if (distance) {
                    if (!userLocationCache || !event.library) return false;
                    
                    const libraryCoords = libraryCoordinates[event.library];
                    if (!libraryCoords) return false;
                    
                    const eventDistance = calculateDistance(
                        userLocationCache.lat, 
                        userLocationCache.lng, 
                        libraryCoords.lat, 
                        libraryCoords.lng
                    );
                    
                    if (eventDistance > parseFloat(distance)) return false;
                }

                return true;
            });

            // Cache the result
            filteredEventsCache.set(filterState, filteredEvents);
            lastFilterState = filterState;

            // Clear cache if it gets too large
            if (filteredEventsCache.size > 50) {
                const firstKey = filteredEventsCache.keys().next().value;
                filteredEventsCache.delete(firstKey);
            }

            updateEventCount();
            updateStatusBar();
            renderCalendar();
            updateMapMarkers();
        }

        // Load programs from API
        async function loadEvents() {
            try {
                document.getElementById('eventCount').innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Loading programs...';
                
                const response = await fetch('/api/events');
                const data = await response.json();
                
                if (data.success) {
                    allEvents = data.events;
                    filteredEvents = [...allEvents];
                    
                    console.log(`✅ Loaded ${allEvents.length} programs`);
                    
                    updateEventCount();
                    updateStatusBar();
                    loadFilterOptions();
                    renderCalendar();
                    
                    document.getElementById('statusBar').style.display = 'block';
                } else {
                    throw new Error(data.error || 'Failed to load events');
                }
            } catch (error) {
                console.error('❌ Error loading events:', error);
                document.getElementById('eventCount').innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i> Error loading programs';
            }
        }

        // Load filter options
        function loadFilterOptions() {
            if (allEvents.length === 0) return;

            const libraries = [...new Set(allEvents.map(event => event.library).filter(Boolean))].sort();
            const categories = [...new Set(allEvents.map(event => event.category).filter(Boolean))].sort();
            const ageGroups = [...new Set(allEvents.map(event => event.ageGroup).filter(Boolean))].sort();

            populateSelect('libraryFilter', libraries);
            populateSelect('categoryFilter', categories);
            populateSelect('ageGroupFilter', ageGroups);
        }

        function populateSelect(selectId, options) {
            const select = document.getElementById(selectId);
            const currentValue = select.value;
            
            select.innerHTML = select.options[0].outerHTML;
            
            options.forEach(option => {
                const optionElement = document.createElement('option');
                optionElement.value = option;
                optionElement.textContent = option;
                select.appendChild(optionElement);
            });
            
            select.value = currentValue;
        }

        // Clear all filters - Updated to include date filter
        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('libraryFilter').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('ageGroupFilter').value = '';
            document.getElementById('dateFilter').value = ''; // Clear date filter too
            document.getElementById('distanceFilter').value = ''; // Clear distance filter too
            filterEvents();
        }

        // Update program count
        function updateEventCount() {
            const total = allEvents.length;
            const showing = filteredEvents.length;
            document.getElementById('eventCount').innerHTML = `
                <i class="fas fa-calendar-check me-1"></i>
                ${showing} of ${total} programs
            `;
        }

        // Update status bar
        function updateStatusBar() {
            const libraries = [...new Set(filteredEvents.map(event => event.library).filter(Boolean))];
            
            document.getElementById('totalEvents').textContent = allEvents.length;
            document.getElementById('filteredEvents').textContent = filteredEvents.length;
            document.getElementById('libraryCount').textContent = libraries.length;
        }

        // View switching functions
        function showCalendarView() {
            document.getElementById('calendarContainer').style.display = 'block';
            document.getElementById('mapContainer').style.display = 'none';
            renderCalendar();
        }

        function showMapView() {
            document.getElementById('calendarContainer').style.display = 'none';
            document.getElementById('mapContainer').style.display = 'block';
            if (!map) {
                initializeMap();
            }
            updateMapMarkers();
        }

        // Initialize map
        function initializeMap() {
            console.log('🗺️ Initializing map...');
            
            map = L.map('map').setView([43.6532, -79.3832], 11);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
            
            // Create layer group for markers
            markersLayer = L.layerGroup().addTo(map);
            
            console.log('✅ Map initialized');
        }

        // Optimized update map markers function
        function updateMapMarkers() {
            if (!map || !markersLayer) return;
            
            // Batch DOM operations
            const fragment = document.createDocumentFragment();
            
            // Clear existing markers and highlights
            markersLayer.clearLayers();
            
            // Remove any existing nearest library highlight markers
            if (window.nearestLibraryMarkers) {
                window.nearestLibraryMarkers.forEach(marker => {
                    if (map.hasLayer(marker)) {
                        map.removeLayer(marker);
                    }
                });
                window.nearestLibraryMarkers = [];
            }
            
            const eventsData = getFilteredEvents();
            
            // Pre-process events by library
            const eventsByLibrary = new Map();
            eventsData.forEach(event => {
                if (!event.library) return;
                
                if (!eventsByLibrary.has(event.library)) {
                    eventsByLibrary.set(event.library, []);
                }
                eventsByLibrary.get(event.library).push(event);
            });
            
            // Create markers in batch
            const markers = [];
            eventsByLibrary.forEach((events, libraryName) => {
                const coordinates = getLibraryCoordinates(libraryName);
                if (!coordinates) return;
                
                const marker = createLibraryMarker(coordinates, libraryName, events);
                markers.push(marker);
            });
            
            // Add all markers at once
            markers.forEach(marker => markersLayer.addLayer(marker));
        }

        // Helper function to get library coordinates efficiently
        function getLibraryCoordinates(libraryName) {
            // Use a more efficient lookup
            const searchNames = [
                libraryName,
                libraryName.toLowerCase(),
                libraryName.replace(/library/i, '').trim(),
                libraryName.replace(/branch/i, '').trim()
            ];
            
            for (const searchName of searchNames) {
                if (libraryCoordinates[searchName]) {
                    return [
                        libraryCoordinates[searchName].lat,
                        libraryCoordinates[searchName].lng
                    ];
                }
            }
            return null;
        }

        // Helper function to create library marker
        function createLibraryMarker(coordinates, libraryName, events) {
            const marker = L.marker(coordinates, { icon: pinIcon });
            
            const locationData = Object.values(libraryCoordinates).find(loc =>
                loc.lat === coordinates[0] && loc.lng === coordinates[1]
            );
            
            // Pre-build popup content more efficiently
            const popupContent = buildPopupContent(libraryName, events, locationData);
            marker.bindPopup(popupContent);
            
            return marker;
        }

        // Helper function to build popup content
        function buildPopupContent(libraryName, events, locationData) {
            const eventList = events.slice(0, 5).map(event => {
                const eventUrl = getEventPageUrl(event);
                const hasUrl = hasValidEventUrl(event);
                
                return `
                    <div class="popup-event">
                        ${hasUrl ? `<a href="${eventUrl}" target="_blank" class="library-link" onclick="event.stopPropagation()">` : ''}
                        <strong>${event.title}</strong>
                        ${hasUrl ? '</a>' : ''}
                        <br>
                        <small>${event.startDate ? event.startDate.split('T')[0] : 'Date TBD'}</small>
                        <br><small onclick="showEventDetails('${event.eventId}')" style="cursor: pointer; color: #0066cc;">View Details</small>
                    </div>
                `;
            }).join('');
            
            return `
                <div class="library-popup">
                    <h3>${libraryName}</h3>
                                            <p><strong>${events.length} programs</strong></p>
                    ${locationData?.address ? `<p>📍 ${locationData.address}</p>` : ''}
                    ${locationData?.phone ? `<p>📞 ${locationData.phone}</p>` : ''}
                    <div class="event-list">
                        ${eventList}
                        ${events.length > 5 ? `<div class="popup-event">...and ${events.length - 5} more programs</div>` : ''}
                    </div>
                </div>
            `;
        }

        // Optimized calendar rendering
        function renderCalendar() {
            console.log('⏱️ Calendar rendering started at:', new Date().toISOString());
            console.log('📍 Current date:', currentDate);
            
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            document.getElementById('currentMonth').textContent =
                currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            const calendarGrid = document.getElementById('calendarGrid');
            
            // Use DocumentFragment for better performance
            const fragment = document.createDocumentFragment();
            
            // Add day headers
            const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            dayHeaders.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.className = 'calendar-day-header';
                dayHeader.textContent = day;
                fragment.appendChild(dayHeader);
            });
            
            // Pre-calculate programs for ONLY the current month
            const monthEvents = new Map();
            const eventsData = getFilteredEvents();
            
            eventsData.forEach(event => {
                if (!event.startDate) return;
                const eventDate = new Date(event.startDate);
                if (eventDate.getFullYear() === year && eventDate.getMonth() === month) {
                    const dateKey = eventDate.toISOString().split('T')[0];
                    if (!monthEvents.has(dateKey)) {
                        monthEvents.set(dateKey, []);
                    }
                    monthEvents.get(dateKey).push(event);
                }
            });
            
            // Calculate the number of weeks needed for this month
            const endDate = new Date(lastDay);
            endDate.setDate(lastDay.getDate() + (6 - lastDay.getDay()));
            const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
            const weeksNeeded = Math.ceil(totalDays / 7);
            
            // Add calendar days
            const currentDateStr = new Date().toDateString();
            
            for (let i = 0; i < weeksNeeded * 7; i++) {
                const cellDate = new Date(startDate);
                cellDate.setDate(startDate.getDate() + i);
                
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                
                // Check if the cell date is outside the current month
                if (cellDate < firstDay || cellDate > lastDay) {
                    dayElement.classList.add('other-month');
                }
                
                if (cellDate.toDateString() === currentDateStr) {
                    dayElement.classList.add('today');
                }
                
                const dayNumber = document.createElement('div');
                dayNumber.className = 'day-number';
                dayNumber.textContent = cellDate.getDate();
                dayElement.appendChild(dayNumber);
                
                // Show programs for ALL days in the calendar grid, but only if they have events
                const dateKey = cellDate.toISOString().split('T')[0];
                const dayEvents = monthEvents.get(dateKey) || [];
                
                if (dayEvents.length > 0) {
                    const eventsContainer = document.createElement('div');
                    eventsContainer.className = 'events-container';
                    
                    const maxVisible = window.innerWidth > 768 ? 3 : 2;
                    const visibleEvents = dayEvents.slice(0, maxVisible);
                    
                    visibleEvents.forEach(event => {
                        const eventTile = document.createElement('div');
                        eventTile.className = 'event-tile';
                        eventTile.textContent = event.title.length > 20 ? event.title.substring(0, 18) + '...' : event.title;
                        eventTile.title = `${event.title}\n${event.library || ''}\n${formatDate(event.startDate) || 'Date TBD'}`;
                        eventTile.onclick = (e) => {
                            e.stopPropagation();
                            showEventDetails(event.eventId);
                        };
                        eventsContainer.appendChild(eventTile);
                    });
                    
                    if (dayEvents.length > maxVisible) {
                        const moreTile = document.createElement('div');
                        moreTile.className = 'more-events';
                        moreTile.textContent = `+${dayEvents.length - maxVisible} more`;
                        moreTile.onclick = (e) => {
                            e.stopPropagation();
                            showDayEventsModal(cellDate, dayEvents);
                        };
                        eventsContainer.appendChild(moreTile);
                    }
                    
                    dayElement.addEventListener('click', () => {
                        showDayEventsModal(cellDate, dayEvents);
                    });
                    
                    dayElement.appendChild(eventsContainer);
                }
                
                fragment.appendChild(dayElement);
            }
            
            // Clear and append all at once
            calendarGrid.innerHTML = '';
            calendarGrid.appendChild(fragment);
        }

        // Show day programs modal
        function showDayEventsModal(date, events) {
            const modal = document.getElementById('dayEventsModal');
            const modalTitle = document.getElementById('dayEventsModalTitle');
            const modalBody = document.getElementById('dayEventsModalBody');
            
                                        modalTitle.innerHTML = `
                <i class="fas fa-calendar-day me-2"></i>
                Programs for ${formatDate(date)}
            `;
            
            modalBody.innerHTML = '';
            
            if (events.length === 0) {
                modalBody.innerHTML = '<p class="text-muted text-center py-4">No programs on this day</p>';
            } else {
                events.forEach(event => {
                    const eventCard = document.createElement('div');
                    eventCard.className = 'day-event-card card';
                    eventCard.onclick = () => showEventDetails(event.eventId);
                    
                    const hasUrl = hasValidEventUrl(event);
                    const eventUrl = getEventPageUrl(event);
                    
                    eventCard.innerHTML = `
                        <div class="card-header">
                            <i class="fas fa-calendar-alt me-2"></i>
                            ${hasUrl ? `<a href="${eventUrl}" target="_blank" class="library-link">` : ''}
                            ${event.title}
                            ${hasUrl ? '</a>' : ''}
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <small class="text-muted">Library:</small><br>
                                    <strong>${event.library || 'Not specified'}</strong>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted">Time:</small><br>
                                    <strong>${event.startTime || 'Time TBD'}</strong>
                                </div>
                            </div>
                            ${event.description ? `
                            <div class="mt-2">
                                <small class="text-muted">Description:</small><br>
                                <div class="text-truncate">${event.description.substring(0, 100)}${event.description.length > 100 ? '...' : ''}</div>
                            </div>
                            ` : ''}
                            <div class="mt-2">
                                <span class="badge bg-primary me-2">${event.category || 'General'}</span>
                                <span class="badge bg-secondary">${event.ageGroup || 'All ages'}</span>
                            </div>
                        </div>
                    `;
                    
                    modalBody.appendChild(eventCard);
                });
            }
            
            const bootstrapModal = new bootstrap.Modal(modal);
            bootstrapModal.show();
        }

        // Get programs for a specific date
        function getEventsForDate(date) {
            const dateStr = date.toISOString().split('T')[0];
            return getFilteredEvents().filter(event => {
                if (!event.startDate) return false;
                const eventDateStr = event.startDate.split('T')[0];
                return eventDateStr === dateStr;
            });
        }

        // Get filtered events
        function getFilteredEvents() {
            return filteredEvents || [];
        }

        // Show program details in modal
        function showEventDetails(eventId) {
            const event = allEvents.find(e => e.eventId === eventId);
            if (!event) return;

            const eventUrl = getEventPageUrl(event);
            const hasUrl = hasValidEventUrl(event);

            const modalBody = document.getElementById('eventModalBody');
            modalBody.innerHTML = `
                <div class="event-detail-item">
                    <div class="event-detail-label">Title</div>
                    <div>${event.title || 'No title'}</div>
                </div>
                <div class="event-detail-item">
                    <div class="event-detail-label">Description</div>
                    <div>${event.description || 'No description available'}</div>
                </div>
                <div class="event-detail-item">
                    <div class="event-detail-label">Library</div>
                    <div>${event.library || 'Not specified'}</div>
                </div>
                ${hasUrl ? `
                <div class="event-detail-item">
                    <div class="event-detail-label">Program Page</div>
                    <div>
                        <a href="${eventUrl}" target="_blank" class="library-link">
                            <i class="fas fa-external-link-alt me-1"></i>
                            View Program Page
                        </a>
                    </div>
                </div>
                ` : ''}
                <div class="event-detail-item">
                    <div class="event-detail-label">Date & Time</div>
                    <div>
                        ${event.startDate ? event.startDate.split('T')[0] : 'Date TBD'}
                        ${event.startTime ? `at ${event.startTime}` : ''}
                    </div>
                </div>
                <div class="event-detail-item">
                    <div class="event-detail-label">Category</div>
                    <div>${event.category || 'Not specified'}</div>
                </div>
                <div class="event-detail-item">
                    <div class="event-detail-label">Age Group</div>
                    <div>${event.ageGroup || 'All ages'}</div>
                </div>
                ${event.registrationRequired ? `
                <div class="event-detail-item">
                    <div class="event-detail-label">Registration</div>
                    <div class="text-warning">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Registration required
                    </div>
                </div>
                ` : ''}
                ${event.contactInfo ? `
                <div class="event-detail-item">
                    <div class="event-detail-label">Contact</div>
                    <div>${event.contactInfo}</div>
                </div>
                ` : ''}
            `;

            const modal = new bootstrap.Modal(document.getElementById('eventModal'));
            modal.show();
        }

        // Utility functions
        function formatDate(dateString) {
            if (!dateString) return '';
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', {
                    weekday: 'short',
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });
            } catch (error) {
                return dateString;
            }
        }

        // Enhanced debounce function
        function debounce(func, wait, immediate) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    timeout = null;
                    if (!immediate) func(...args);
                };
                const callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func(...args);
            };
        }

        // Enhanced error handling
        function handleLocationError(error) {
            let errorMessage = 'Could not get your location. ';
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage += 'Please allow location access in your browser settings and try again.';
                    showLocationError(errorMessage, 'permission');
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage += 'Location information is unavailable. Please check your device settings.';
                    showLocationError(errorMessage, 'unavailable');
                    break;
                case error.TIMEOUT:
                    errorMessage += 'Location request timed out. Please try again.';
                    showLocationError(errorMessage, 'timeout');
                    break;
                default:
                    errorMessage += 'An unknown error occurred.';
                    showLocationError(errorMessage, 'unknown');
            }
        }

        // New function to show location success
        function showLocationSuccess(message) {
            // Create a temporary success notification
            const notification = document.createElement('div');
            notification.className = 'alert alert-success alert-dismissible fade show position-fixed';
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Enhanced error display
        function showLocationError(message, type = 'general') {
            const notification = document.createElement('div');
            notification.className = 'alert alert-warning alert-dismissible fade show position-fixed';
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
            
            let icon = 'fas fa-exclamation-triangle';
            if (type === 'permission') {
                icon = 'fas fa-lock';
            } else if (type === 'unavailable') {
                icon = 'fas fa-map-marker-slash';
            } else if (type === 'timeout') {
                icon = 'fas fa-clock';
            }
            
            notification.innerHTML = `
                <i class="${icon} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto-remove after 8 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 8000);
        }

        // New function to check for stored location on page load
        function checkStoredLocation() {
            const storedLocation = localStorage.getItem('userLocation');
            if (storedLocation) {
                try {
                    const location = JSON.parse(storedLocation);
                    const age = Date.now() - location.timestamp;
                    
                    // Use stored location if it's less than 30 minutes old
                    if (age < 30 * 60 * 1000) {
                        console.log('📍 Using stored location');
                        updateMapWithUserLocation(location.lat, location.lng, location.accuracy);
                        return true;
                    }
                } catch (error) {
                    console.error('Error parsing stored location:', error);
                }
            }
            return false;
        }

        // New function to update map with user location
        function updateMapWithUserLocation(lat, lng, accuracy) {
            // Remove existing current location marker
            if (currentLocationMarker) {
                map.removeLayer(currentLocationMarker);
                if (currentLocationMarker.accuracyCircle) {
                    map.removeLayer(currentLocationMarker.accuracyCircle);
                }
            }
            
            // Add current location marker
            currentLocationMarker = L.marker([lat, lng], { 
                icon: currentLocationIcon,
                zIndexOffset: 1000
            });
            
            currentLocationMarker.bindPopup(`
                <div style="text-align: center;">
                    <strong>📍 Your Location</strong><br>
                    <small>Accuracy: ~${Math.round(accuracy)}m</small><br>
                    <button onclick="findNearestLibraries(${lat}, ${lng})" class="btn btn-sm btn-primary mt-2">
                        Find Nearest Libraries
                    </button>
                </div>
            `).openPopup();
            
            currentLocationMarker.addTo(map);
            
            // Center map on current location
            map.setView([lat, lng], 14);
            
            // Add accuracy circle
            const accuracyCircle = L.circle([lat, lng], {
                radius: accuracy,
                fillColor: '#4285f4',
                fillOpacity: 0.1,
                color: '#4285f4',
                weight: 1
            }).addTo(map);
            
            currentLocationMarker.accuracyCircle = accuracyCircle;
        }

        // Request location permission on page load
        function requestLocationPermission() {
            if (navigator.permissions && navigator.permissions.query) {
                navigator.permissions.query({ name: 'geolocation' }).then(function(result) {
                    if (result.state === 'granted') {
                        console.log('✅ Location permission already granted');
                        // Optionally auto-detect location
                        // findCurrentLocation();
                    } else if (result.state === 'prompt') {
                        console.log('📍 Location permission will be requested when needed');
                    } else if (result.state === 'denied') {
                        console.log('❌ Location permission denied');
                        showLocationError('Location access is blocked. Please enable it in your browser settings.', 'permission');
                    }
                });
            }
        }

        // Add event listener for distance filter
        document.getElementById('distanceFilter').addEventListener('change', filterEvents);

        // Apply debouncing to search input
        document.getElementById('searchInput').addEventListener('input', debounce(filterEvents, 300));

        // Add this to your filter section in the HTML
        // Add this inside the filter-section div, after the existing filters:

        // Add this JavaScript function:

        // Add this to your navbar, after the existing navbar-text
        // Add this to the navbar, after the existing navbar-text
        function updateLocationStatus() {
            const storedLocation = localStorage.getItem('userLocation');
            const statusElement = document.getElementById('locationStatusText');
            const iconElement = document.getElementById('locationStatus').querySelector('i');
            
            if (storedLocation) {
                try {
                    const location = JSON.parse(storedLocation);
                    const age = Date.now() - location.timestamp;
                    
                    if (age < 30 * 60 * 1000) { // Less than 30 minutes old
                        statusElement.textContent = 'Location available';
                        iconElement.className = 'fas fa-map-marker-alt me-1 text-success';
                    } else {
                        statusElement.textContent = 'Location expired';
                        iconElement.className = 'fas fa-map-marker-alt me-1 text-warning';
                    }
                } catch (error) {
                    statusElement.textContent = 'Location error';
                    iconElement.className = 'fas fa-map-marker-alt me-1 text-danger';
                }
            } else {
                statusElement.textContent = 'Location not set';
                iconElement.className = 'fas fa-map-marker-alt me-1 text-muted';
            }
        }

        // Call this function after location operations
        // Add to findCurrentLocation() and checkStoredLocation()

        // Add performance monitoring
        function measurePerformance(name, fn) {
            return function(...args) {
                const start = performance.now();
                const result = fn.apply(this, args);
                const end = performance.now();
                console.log(`⏱️ ${name} took ${(end - start).toFixed(2)}ms`);
                return result;
            };
        }

        // Wrap key functions with performance monitoring
        const originalFilterEvents = filterEvents;
        filterEvents = measurePerformance('filterEvents', originalFilterEvents);

        const originalRenderCalendar = renderCalendar;
        renderCalendar = measurePerformance('renderCalendar', originalRenderCalendar);

        const originalUpdateMapMarkers = updateMapMarkers;
        updateMapMarkers = measurePerformance('updateMapMarkers', originalUpdateMapMarkers);

        // Add this function to handle location permission requests
        function requestLocationForDistanceFilter() {
            if (!navigator.geolocation) {
                showLocationError('Geolocation is not supported by this browser.');
                return false;
            }

            // Check if we already have location permission
            if (navigator.permissions && navigator.permissions.query) {
                navigator.permissions.query({ name: 'geolocation' }).then(function(result) {
                    if (result.state === 'granted') {
                        // Permission already granted, get location
                        getCurrentLocationForFilter();
                    } else if (result.state === 'prompt') {
                        // Permission not determined, request it
                        getCurrentLocationForFilter();
                    } else if (result.state === 'denied') {
                        // Permission denied, show error
                        showLocationError('Location access is required for distance filtering. Please enable it in your browser settings.', 'permission');
                        // Reset the distance filter
                        document.getElementById('distanceFilter').value = '';
                    }
                });
            } else {
                // Fallback for browsers that don't support permissions API
                getCurrentLocationForFilter();
            }
        }

        // Function to get current location specifically for filtering
        function getCurrentLocationForFilter() {
            const locationBtn = document.getElementById('locationBtn');
            
            // Show loading state on the location button
            locationBtn.classList.add('loading');
            locationBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            locationBtn.title = 'Getting location for filter...';
            
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    const accuracy = position.coords.accuracy;
                    
                    console.log(`📍 Location obtained for filter: ${lat}, ${lng} (accuracy: ${accuracy}m)`);
                    
                    // Store user location
                    localStorage.setItem('userLocation', JSON.stringify({
                        lat: lat,
                        lng: lng,
                        accuracy: accuracy,
                        timestamp: Date.now()
                    }));
                    
                    // Update location cache
                    userLocationCache = { lat, lng, accuracy };
                    
                    // Reset button state
                    locationBtn.classList.remove('loading');
                    locationBtn.innerHTML = '<i class="fas fa-location-arrow"></i>';
                    locationBtn.title = 'Location found! Click to update';
                    
                    // Show success message
                    showLocationSuccess(`Location obtained! Distance filter is now active.`);
                    
                    // Update the map if we're in map view
                    if (map && currentLocationMarker) {
                        updateMapWithUserLocation(lat, lng, accuracy);
                    }
                    
                    // Apply the filter
                    filterEvents();
                    
                },
                function(error) {
                    console.error('❌ Location error for filter:', error);
                    handleLocationError(error);
                    
                    // Reset button state
                    locationBtn.classList.remove('loading');
                    locationBtn.innerHTML = '<i class="fas fa-location-arrow"></i>';
                    locationBtn.title = 'Find my location';
                    
                    // Reset the distance filter since we couldn't get location
                    document.getElementById('distanceFilter').value = '';
                    
                    // Apply filters without distance
                    filterEvents();
                },
                {
                    enableHighAccuracy: true,
                    timeout: 15000,
                    maximumAge: 300000 // 5 minutes
                }
            );
        }

        // Update the setupEventListeners function to handle distance filter changes
        function setupEventListeners() {
            // Use event delegation for filter changes
            document.addEventListener('change', function(e) {
                if (e.target.matches('#libraryFilter, #categoryFilter, #ageGroupFilter, #dateFilter')) {
                    filterEvents();
                } else if (e.target.matches('#distanceFilter')) {
                    handleDistanceFilterChange(e.target.value);
                }
            });
            
            // Use event delegation for buttons
            document.addEventListener('click', function(e) {
                if (e.target.matches('#clearFilters')) {
                    clearFilters();
                } else if (e.target.matches('#clearDateFilter')) {
                    document.getElementById('dateFilter').value = '';
                    filterEvents();
                } else if (e.target.matches('#locationBtn')) {
                    findCurrentLocation();
                } else if (e.target.matches('#prevMonth')) {
                    currentDate.setMonth(currentDate.getMonth() - 1);
                    renderCalendar();
                } else if (e.target.matches('#nextMonth')) {
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    renderCalendar();
                } else if (e.target.matches('#todayBtn')) {
                    currentDate = new Date();
                    renderCalendar();
                }
            });
            
            // View toggle
            document.querySelectorAll('input[name="view"]').forEach(input => {
                input.addEventListener('change', function() {
                    if (this.value === 'calendar') {
                        showCalendarView();
                    } else if (this.value === 'map') {
                        showMapView();
                    }
                });
            });
        }

        // New function to handle distance filter changes
        function handleDistanceFilterChange(distanceValue) {
            if (!distanceValue) {
                // Distance filter cleared, just apply filters
                filterEvents();
                return;
            }
            
            // Check if we have stored location
            const storedLocation = localStorage.getItem('userLocation');
            if (storedLocation) {
                try {
                    const location = JSON.parse(storedLocation);
                    const age = Date.now() - location.timestamp;
                    
                    // Use stored location if it's less than 30 minutes old
                    if (age < 30 * 60 * 1000) {
                        console.log('📍 Using stored location for distance filter');
                        userLocationCache = location;
                        filterEvents();
                        return;
                    }
                } catch (error) {
                    console.error('Error parsing stored location:', error);
                }
            }
            
            // No valid stored location, request permission
            console.log('📍 No valid stored location, requesting permission for distance filter');
            requestLocationForDistanceFilter();
        }

        // Update the clearFilters function to also clear distance filter
        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('libraryFilter').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('ageGroupFilter').value = '';
            document.getElementById('dateFilter').value = '';
            document.getElementById('distanceFilter').value = ''; // Clear distance filter too
            filterEvents();
        }
    </script>
</body>
</html>